import org.eclipse.jgit.api.Git
import org.eclipse.jgit.lib.RepositoryBuilder

apply plugin: "com.android.application"
apply plugin: "kotlin-android"
apply plugin: "kotlin-android-extensions"
apply plugin: "io.fabric"
apply plugin: "com.akaita.android.easylauncher"
apply plugin: "pl.allegro.tech.build.axion-release"
apply plugin: "com.github.triplet.play"

scmVersion {
	tag {
		prefix = ""
	}
}

play {
	jsonFile = file("play-service-account.json")
	track = "alpha"
}

android {
	compileSdkVersion compilesdk_version
	buildToolsVersion build_tools_version

	sourceSets {
		main.java.srcDirs += "src/main/kotlin"
		production.java.srcDirs += "src/production/kotlin"
		develop.java.srcDirs += "src/develop/kotlin"
		test.java.srcDirs += "src/test/kotlin"
		androidTest.java.srcDirs += "src/androidTest/kotlin"
	}

	packagingOptions {
		// Exclude duplicate files in output
		exclude "META-INF/LICENSE"
		exclude "META-INF/NOTICE"
	}

	testOptions {
		// Solves android Log not mocked
		unitTests.returnDefaultValues = true
	}

	defaultConfig {
		applicationId "se.gustavkarlsson.skylight.android"
		minSdkVersion project.min_sdk_version
		targetSdkVersion project.target_sdk_version
		versionCode generateVersionCode(scmVersion.version)
		versionName scmVersion.version
		testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
		multiDexEnabled true

		def repo = new RepositoryBuilder()
			.setGitDir(new File(rootDir, "/.git"))
			.readEnvironment()
			.build()
		def head = repo.exactRef("HEAD")
		def gitBranch = new Git(repo).branchList()
			.call()
			.find {
			it.objectId == head.objectId
		}?.name?.replaceAll(".*/", "") ?: "None"
		def gitSha1 = head.objectId.name
		def buildTime = System.currentTimeMillis()

		buildConfigField "String", "GIT_BRANCH", "\"$gitBranch\""
		buildConfigField "String", "GIT_SHA1", "\"$gitSha1\""
		buildConfigField "long", "BUILD_TIME_MILLIS", "${buildTime}L"
	}

	signingConfigs {
		release {
			storeFile file(project.findProperty("android_store_file") ?: "android_store_file_not_set")
			storePassword project.findProperty("android_store_password") ?: "android_store_password_not_set"
			keyAlias project.findProperty("android_key_alias") ?: "android_key_alias_not_set"
			keyPassword project.findProperty("android_key_password") ?: "android_key_password_not_set"
		}
	}

	buildTypes {
		release {
			minifyEnabled false
			signingConfig signingConfigs.release
		}

		debug {
			versionNameSuffix "-debug"
			applicationIdSuffix ".debug"
			ext.enableCrashlytics = false
		}
	}

	flavorDimensions "environment"

	productFlavors {
		production {
			dimension "environment"
		}

		develop {
			dimension "environment"
			versionNameSuffix "-develop"
			applicationIdSuffix ".develop"
		}
	}

	applicationVariants.all { variant ->
		def appName = "Skylight"

		if (variant.buildType.name != "release" || variant.flavorName != "production") {
			appName += " (${variant.flavorName}${variant.buildType.name.capitalize()})"
		}

		resValue "string", "app_name_variant", appName
	}
}

dependencies {
	implementation project(":core")
	implementation project(":background")
	implementation project(":analytics")
	implementation project(":location")
	implementation project(":weather")
	implementation project(":kpindex")

	implementation "com.google.android.material:material:$android_support_version"
	implementation "androidx.multidex:multidex:$multidex_version"
	implementation "androidx.appcompat:appcompat:$android_support_version"
	implementation "androidx.fragment:fragment:$android_support_version"
	implementation "androidx.annotation:annotation:$android_support_version"
	implementation "androidx.preference:preference:$android_support_version"
	implementation "androidx.cardview:cardview:$android_support_version"
	implementation "androidx.constraintlayout:constraintlayout:$constraint_layout_version"

	// Google Play Services
	implementation "com.google.android.gms:play-services-gcm:$google_play_services_version"

	// Misc
	implementation "net.e175.klaus:solarpositioning:$solarpositioning_version"

	// Navigation
	implementation "android.arch.navigation:navigation-fragment:$navigation_version"
	implementation "android.arch.navigation:navigation-ui:$navigation_version"
	implementation "android.arch.navigation:navigation-ui-ktx:$ktx_navigation_ui_version"

	// Rx misc
	implementation "io.reactivex.rxjava2:rxandroid:$rxandroid_version"
	implementation "com.jakewharton.rxrelay2:rxrelay:$rxrelay_version"
	implementation "com.tbruyelle.rxpermissions2:rxpermissions:${rxpermissions_version}@aar"
	implementation "com.f2prateek.rx.preferences2:rx-preferences:$rxpreferences_version"

	// RxBinding
	implementation "com.jakewharton.rxbinding2:rxbinding-kotlin:$rxbinding_version"
	implementation "com.jakewharton.rxbinding2:rxbinding-support-v4-kotlin:$rxbinding_version"
	implementation "com.jakewharton.rxbinding2:rxbinding-appcompat-v7-kotlin:$rxbinding_version"
	implementation "com.jakewharton.rxbinding2:rxbinding-design-kotlin:$rxbinding_version"
	implementation "com.jakewharton.rxbinding2:rxbinding-recyclerview-v7-kotlin:$rxbinding_version"

	// AutoDispose
	implementation "com.uber.autodispose:autodispose-kotlin:$autodispose_version"
	implementation "com.uber.autodispose:autodispose-android-kotlin:$autodispose_version"
	implementation "com.uber.autodispose:autodispose-android-archcomponents-kotlin:$autodispose_version"

	// Lifecycle
	implementation "androidx.lifecycle:lifecycle-extensions:$arch_lifecycle_version"

	// Crashlytics
	implementation "com.crashlytics.sdk.android:crashlytics:$crashlytics_version"

	// Leakcanary
	debugImplementation "com.squareup.leakcanary:leakcanary-android:$leakcanary_version"
	releaseImplementation "com.squareup.leakcanary:leakcanary-android-no-op:$leakcanary_version"

	// Koin
	implementation "org.koin:koin-androidx-viewmodel:$koin_version"
	implementation "org.koin:koin-androidx-scope:$koin_version"

	// Testing
	testImplementation "org.robolectric:robolectric:$robolectric_version"
	testImplementation "junit:junit:$junit_version"
	testImplementation "org.mockito:mockito-inline:$mockito_version"
	testImplementation "com.nhaarman:mockito-kotlin-kt1.1:$mockito_kotlin_version", {
		exclude group: "org.jetbrains.kotlin"
	}
	testImplementation "commons-io:commons-io:$commons_io_version"
	testImplementation "com.willowtreeapps.assertk:assertk:$assertk_version", {
		exclude group: "org.jetbrains.kotlin"
	}
	testImplementation "com.google.code.gson:gson:$gson_version"

	// Instrumentation testing
	androidTestImplementation "androidx.annotation:annotation:$android_support_version"
	androidTestImplementation "androidx.test:runner:$android_support_test_version"
	androidTestImplementation "androidx.test:rules:$android_support_test_version"
	androidTestImplementation "androidx.test.espresso:espresso-core:$espresso_version"
	androidTestImplementation "org.mockito:mockito-android:$mockito_version"
	androidTestImplementation "com.nhaarman:mockito-kotlin-kt1.1:$mockito_kotlin_version", {
		exclude group: "org.jetbrains.kotlin"
	}
	androidTestImplementation "commons-io:commons-io:$commons_io_version"
	androidTestImplementation "com.agoda.kakao:kakao:$kakao_version"
}

/**
 * Calculates an Android version code from a version number string.<br>
 * <br>
 * Note that versions containing the string "snapshot" (case insensitive) will get a lower
 * version code than a release version, since release versions come after snapshot versions.<br>
 * <br>
 * Examples:
 * <ul>
 *     <li>"0.0.1-SNAPSHOT" => 100</li><
 *     <li>"1.2.3-SNAPSHOT" => 1020300</li>
 *     <li>"11.22.33" => 11223301</li>
 * </ul>
 * @param version A version number following "semantic versioning"
 * @return A version code
 */
static int generateVersionCode(String version) {
	def type = version.toLowerCase().contains("snapshot") ? 0 : 1
	def (major, minor, patch) = version
		.tokenize('.')
		.collect { it.replaceAll("\\D", "") }
		.collect { it.toInteger() }
	def versionCode = (major * 1000000) + (minor * 10000) + (patch * 100) + type
	assert major in 0..2000
	assert minor in 0..99
	assert patch in 0..99
	assert type in 0..99
	assert versionCode in 1..2100000000
	return versionCode
}

// Recommended to be applied at bottom
apply plugin: "com.google.gms.google-services"

// Disable Google Services for specific variants
android.applicationVariants.all { variant ->
	if (variant.buildType.name == "debug") {
		project.tasks.getByName("process${variant.name.capitalize()}GoogleServices").enabled = false
	}
}
