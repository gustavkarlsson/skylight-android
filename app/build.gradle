apply plugin: "com.android.application"
apply plugin: "kotlin-android"
apply plugin: "kotlin-android-extensions"
apply plugin: "io.fabric"

android {
	compileSdkVersion project.compilesdk_version
	buildToolsVersion project.build_tools_version

	sourceSets {
		main.java.srcDirs += "src/main/kotlin"
		production.java.srcDirs += "src/production/kotlin"
		staging.java.srcDirs += "src/staging/kotlin"
		test.java.srcDirs += "src/test/kotlin"
		androidTest.java.srcDirs += "src/androidTest/kotlin"
	}

	packagingOptions {
		// Exclude duplicate files in output
		exclude "META-INF/LICENSE"
		exclude "META-INF/NOTICE"
	}

	testOptions {
		// Solves android Log not mocked
		unitTests.returnDefaultValues = true
	}

	defaultConfig {
		applicationId "se.gustavkarlsson.skylight.android"
		minSdkVersion project.min_sdk_version
		targetSdkVersion project.target_sdk_version
		versionCode 1
		versionName "1.0"
		testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
		multiDexEnabled true
		// TODO https://developer.android.com/studio/build/multidex.html#dev-build
	}

	signingConfigs {
		release {
			storeFile file(project.findProperty("android_store_file") ?: "android_store_file_not_set")
			storePassword project.findProperty("android_store_password") ?: "android_store_password_not_set"
			keyAlias project.findProperty("android_key_alias") ?: "android_key_alias_not_set"
			keyPassword project.findProperty("android_key_password") ?: "android_key_password_not_set"
		}
	}

	buildTypes {
		release {
			minifyEnabled true
			proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
			signingConfig signingConfigs.release
		}

		debug {
			versionNameSuffix "-debug"
			applicationIdSuffix ".debug"
			ext.enableCrashlytics = false
		}
	}

	flavorDimensions "environment"

	productFlavors {
		production {
			dimension "environment"
		}

		staging {
			dimension "environment"
			versionNameSuffix "-staging"
			applicationIdSuffix ".staging"
		}
	}

	applicationVariants.all { variant ->
		def appName = "Skylight"

		if (variant.flavorName != "production") {
			appName += " ${variant.flavorName.capitalize()}"
		}

		if (variant.buildType.name != "release") {
			appName += " (${variant.buildType.name.capitalize()})"
		}

		resValue "string", "app_name", appName
	}

	productFlavors.each { flavor ->
		def openWeatherMapApiKey = project.findProperty("openweathermap_api_key") ?: "openweathermap_api_key_not_set"
		flavor.buildConfigField "String", "OPENWEATHERMAP_API_KEY", "\"$openWeatherMapApiKey\""
	}
}

dependencies {
	implementation project(":core")
	implementation project(":background")

	implementation "com.android.support:multidex:$multidex_version"
	implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
	implementation "com.android.support:appcompat-v7:$android_support_version"
	implementation "com.android.support:design:$android_support_version"
	implementation "com.android.support:support-fragment:$android_support_version"
	implementation "com.android.support:support-annotations:$android_support_version"
	implementation "com.android.support.constraint:constraint-layout:$constraint_layout_version"
	implementation "com.google.android.gms:play-services-location:$google_play_services_version"
	implementation "com.google.android.gms:play-services-gcm:$google_play_services_version"

	implementation "com.github.gustavkarlsson:aurora-notifier-common:$aurora_notifier_common_version"
	implementation "net.e175.klaus:solarpositioning:$solarpositioning_version"
	implementation "com.jakewharton.threetenabp:threetenabp:$threetenabp_version"
	implementation "com.hadisatrio:Optional:$optional_version"
	implementation "com.jakewharton.timber:timber:$timber_version"

	// Anko
	implementation "org.jetbrains.anko:anko-commons:$anko_version"
	implementation "org.jetbrains.anko:anko-design:$anko_version"

	// Retrofit
	implementation "com.squareup.retrofit2:retrofit:$retrofit_version"
	implementation "com.squareup.retrofit2:converter-gson:$retrofit_version"
	implementation "com.squareup.retrofit2:adapter-rxjava2:$retrofit_version"

	// ReactiveX
	implementation "io.reactivex.rxjava2:rxandroid:$rxandroid_version"

	// Rx misc
	implementation "com.jakewharton.rxrelay2:rxrelay:$rxrelay_version"
	implementation "com.tbruyelle.rxpermissions2:rxpermissions:${rxpermissions_version}@aar"
	implementation "pl.charmas.android:android-reactive-location2:${reactive_location_version}@aar"
	implementation "com.f2prateek.rx.preferences2:rx-preferences:$rxpreferences_version"
	implementation "com.github.pwittchen:reactivenetwork-rx2:$reactivenetwork_version"

	// RxBinding
	implementation "com.jakewharton.rxbinding2:rxbinding-kotlin:$rxbinding_version"
	implementation "com.jakewharton.rxbinding2:rxbinding-support-v4-kotlin:$rxbinding_version"
	implementation "com.jakewharton.rxbinding2:rxbinding-appcompat-v7-kotlin:$rxbinding_version"
	implementation "com.jakewharton.rxbinding2:rxbinding-design-kotlin:$rxbinding_version"
	implementation "com.jakewharton.rxbinding2:rxbinding-recyclerview-v7-kotlin:$rxbinding_version"
	implementation "com.jakewharton.rxbinding2:rxbinding-leanback-v17-kotlin:$rxbinding_version"

	// AutoDispose
	implementation "com.uber.autodispose:autodispose-kotlin:$autodispose_version"
	implementation "com.uber.autodispose:autodispose-android-kotlin:$autodispose_version"
	implementation "com.uber.autodispose:autodispose-android-archcomponents-kotlin:$autodispose_version"

	// Lifecycle
	implementation "android.arch.lifecycle:extensions:$arch_lifecycle_version"

	// Firebase
	implementation "com.google.firebase:firebase-core:$firebase_version"
	implementation "com.crashlytics.sdk.android:crashlytics:$crashlytics_version"


	// Testing
	testImplementation "org.robolectric:robolectric:$robolectric_version"
	testImplementation "junit:junit:$junit_version"
	testImplementation "org.mockito:mockito-core:$mockito_version"
	testImplementation "com.nhaarman:mockito-kotlin-kt1.1:$mockito_kotlin_version", { exclude group: "org.jetbrains.kotlin" }
	testImplementation "commons-io:commons-io:$commons_io_version"
	testImplementation "com.willowtreeapps.assertk:assertk:$assertk_version"
	testImplementation "com.google.code.gson:gson:$gson_version"

	// Instrumentation testing
	androidTestImplementation "com.android.support:support-annotations:$android_support_version"
	androidTestImplementation "com.android.support.test:runner:$android_support_test_version"
	androidTestImplementation "com.android.support.test:rules:$android_support_test_version"
	androidTestImplementation "com.android.support.test.espresso:espresso-core:$espresso_version"
	androidTestImplementation "org.mockito:mockito-android:$mockito_version"
	androidTestImplementation "com.nhaarman:mockito-kotlin-kt1.1:$mockito_kotlin_version", { exclude group: "org.jetbrains.kotlin" }
	androidTestImplementation "commons-io:commons-io:$commons_io_version"
}

// Recommended to be applied at bottom
apply plugin: "com.google.gms.google-services"

// Disable Google Services for specific variants
android.applicationVariants.all { variant ->
	if (variant.buildType.name == "debug") {
		project.tasks.getByName("process${variant.name.capitalize()}GoogleServices").enabled = false
	}
}
